" see here for some tips:
" http://of-vim-and-vigor.blogspot.com.au/2012/05/my-vimrc.html

" use Vim not vi
set nocompatible

" 2017-07-09 jj5 - DONE: installed pathogen.vim.
" 2017-07-09 jj5 - SEE: pathogen.vim:
" https://github.com/tpope/vim-pathogen
execute pathogen#infect()

filetype plugin indent on
syntax on
colorscheme desert

set tabstop=2
set softtabstop=2
set shiftwidth=2
set expandtab
nnoremap <F5> :%retab!<CR>

set hlsearch
set ignorecase
set smartcase
set incsearch

set backspace=indent,eol,start
set autoindent
set nostartofline
set nopaste

" http://vim.wikia.com/wiki/Toggle_auto-indenting_for_code_paste
nnoremap <F2> :set invpaste paste?<CR>
set pastetoggle=<f2>
set showmode

set wildmenu
set wildmode=list:full
set showcmd
set laststatus=2
set cmdheight=2
set statusline=%f%m%r%h%w\ [%n:%{&ff}/%Y]%=[0x\%04.4B][%03v][%p%%\ line\ %l\ of\ %L]

"set number
set visualbell
set t_vb=
"set mouse=a
set ttimeout ttimeoutlen=200
set notimeout
set list
"set listchars=tab:⇥\ ,trail:·,eol:¶
set listchars=tab:⇥\ ,trail:·
set shortmess=atI

nnoremap <F4> :set invspell spell?<cr>
nnoremap <silent> <F8> :let @/='\<'.expand('<cword>').'\>'<bar>set hlsearch<cr>
nnoremap <F3> :set hlsearch!<CR>

vmap \c :s!^!//!<CR>
vmap \u :s!^//!!<CR>
vmap \C :s!^!#!<CR>
vmap \U :s!^#!!<CR>

source $HOME/.vim/plugin/matchit.vim

" associate *.rules with iptables filetype
au BufRead,BufNewFile *.rules set filetype=iptables

"augroup filetypedetect
  "au BufNewFile,BufRead *.xt  setf xt
"augroup END
au BufNewFile,BufRead *.xt  set filetype=xt

" 2020-02-04 jj5 - SEE: https://github.com/mgedmin/dotvim/blob/master/ftdetect/jsm.vim
" 2020-02-04 jj5 - this sets Mozilla 'jsm' files to be javascript...
au BufRead,BufNewFile *.jsm  set filetype=javascript

" http://amix.dk/vim/vimrc.html
set history=999
set autoread

let mapleader = ","
let g:mapleader = ","

" Fast saving
nmap <leader>w :w!<cr>

set whichwrap+=<,>,h,l

set encoding=utf8
set ffs=unix,dos,mac

set nobackup
set nowb
set noswapfile

set lbr
set tw=500

set ai
set si
set wrap

""""""""""""""""""""""""""""""
" => Visual mode related
""""""""""""""""""""""""""""""
" Visual mode pressing * or # searches for the current selection
" Super useful! From an idea by Michael Naumann
vnoremap <silent> * :call VisualSelection('f')<CR>
vnoremap <silent> # :call VisualSelection('b')<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Moving around, tabs, windows and buffers
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Treat long lines as break lines (useful when moving around in them)
map j gj
map k gk

map <silent> <leader><cr> :noh<cr>

" Smart way to move between windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" Close the current buffer
map <leader>bd :Bclose<cr>

" Close all the buffers
map <leader>ba :1,1000 bd!<cr>

" Useful mappings for managing tabs
map <leader>tn :tabnew<cr>
map <leader>to :tabonly<cr>
map <leader>tc :tabclose<cr>
map <leader>tm :tabmove

" Opens a new tab with the current buffer's path
" Super useful when editing files in the same directory
map <leader>te :tabedit <c-r>=expand("%:p:h")<cr>/

" Switch CWD to the directory of the open buffer
map <leader>cd :cd %:p:h<cr>:pwd<cr>

" Specify the behavior when switching between buffers 
try
  set switchbuf=useopen,usetab,newtab
  set stal=2
catch
endtry

" Return to last edit position when opening files (You want this!)
autocmd BufReadPost *
     \ if line("'\"") > 0 && line("'\"") <= line("$") |
     \   exe "normal! g`\"" |
     \ endif

" Remember info about open buffers on close
set viminfo^=%

" Move a line of text using ALT+[jk] or Comamnd+[jk] on mac
nmap <M-j> mz:m+<cr>`z
nmap <M-k> mz:m-2<cr>`z
vmap <M-k> :m'<-2<cr>`>my`<mzgv`yo`z
vmap <M-j> :m'>+<cr>`<my`>mzgv`yo`z

" Delete trailing white space on save, useful for Python and CoffeeScript ;)
func! DeleteTrailingWS()
  exe "normal mz"
  %s/\s\+$//ge
  exe "normal `z"
endfunc
autocmd BufWrite *.py :call DeleteTrailingWS()
autocmd BufWrite *.coffee :call DeleteTrailingWS()
autocmd BufWrite *.php :call DeleteTrailingWS()

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Spell checking
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Pressing ,ss will toggle and untoggle spell checking
map <leader>ss :setlocal spell!<cr>

" Shortcuts using <leader>
map <leader>sn ]s
map <leader>sp [s
map <leader>sa zg
map <leader>s? z=

" Remove the Windows ^M - when the encodings gets messed up
noremap <Leader>m mmHmt:%s/<C-V><cr>//ge<cr>'tzt'm

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Helper functions
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! CmdLine(str)
    exe "menu Foo.Bar :" . a:str
    emenu Foo.Bar
    unmenu Foo
endfunction

function! VisualSelection(direction) range
    let l:saved_reg = @"
    execute "normal! vgvy"

    let l:pattern = escape(@", '\\/.*$^~[]')
    let l:pattern = substitute(l:pattern, "\n$", "", "")

    if a:direction == 'b'
        execute "normal ?" . l:pattern . "^M"
    elseif a:direction == 'gv'
        call CmdLine("vimgrep " . '/'. l:pattern . '/' . ' **/*.')
    elseif a:direction == 'replace'
        call CmdLine("%s" . '/'. l:pattern . '/')
    elseif a:direction == 'f'
        execute "normal /" . l:pattern . "^M"
    endif

    let @/ = l:pattern
    let @" = l:saved_reg
endfunction

" Returns true if paste mode is enabled
function! HasPaste()
    if &paste
        return 'PASTE MODE  '
    en
    return ''
endfunction

" Don't close window, when deleting a buffer
command! Bclose call <SID>BufcloseCloseIt()
function! <SID>BufcloseCloseIt()
   let l:currentBufNum = bufnr("%")
   let l:alternateBufNum = bufnr("#")

   if buflisted(l:alternateBufNum)
     buffer #
   else
     bnext
   endif

   if bufnr("%") == l:currentBufNum
     new
   endif

   if buflisted(l:currentBufNum)
     execute("bdelete! ".l:currentBufNum)
   endif
endfunction

" fix meta-keys which generate <Esc>a .. <Esc>z
" http://vim.wikia.com/wiki/Fix_meta-keys_that_break_out_of_Insert_mode
let c='a'
while c <= 'z'
  exec "set <M-".tolower(c).">=\e".c
  exec "imap \e".c." <M-".tolower(c).">"
  let c = nr2char(1+char2nr(c))
endw

" disable bold status line
" http://vim.wikia.com/wiki/Switching_between_different_statuslines
hi statusline term=inverse cterm=inverse
hi statuslinenc term=inverse cterm=inverse

